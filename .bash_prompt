# Bash sexy promt

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        GREEN=$(tput setaf 190)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 244)
        YELLOW=$(tput setaf 136)
    else
        MAGENTA=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        GREEN=$(tput setaf 2)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export YELLOW
export BOLD
export RESET

is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}

get_git_branch() {
    local branch_name

    # Get the short symbolic ref
    branch_name=$(command git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(command git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"

    echo $branch_name
}

# Git status information
function prompt_git() {
    local git_info git_state uc us ut st

    if ! is_git_repo; then
        return 1
    fi

    git_info=$(get_git_branch)

    # Check for uncommitted changes in the index
    if ! `command git diff --quiet --ignore-submodules --cached`; then
        uc="+"
    fi

    # Check for unstaged changes
    if ! `command git diff-files --quiet --ignore-submodules --`; then
        us="!"
    fi

    # Check for untracked files
    if [ -n "$(command git ls-files --others --exclude-standard)" ]; then
        ut="?"
    fi

    # Check for stashed files
    if `command git rev-parse --verify refs/stash &>/dev/null`; then
        st="$"
    fi

    git_state=$uc$us$ut$st

    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info[$git_state]"
    fi

    printf " on ${YELLOW}git:${git_info}"
}

export PS1="\[${BOLD}${WHITE}\] λ \[$(tput setaf 21)\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\${PWD/#\$HOME/~}\[$WHITE\]\$(prompt_git)\[$WHITE\]\n → \[$RESET\]"

export PS2="\[$ORANGE\] → \[$RESET\]"

# PS4 for debugging purposes written intially by awesome @janmoesen for `tilde`
# Include the current file and line number when tracing using "set -x". (You
# can also include "\$FUNCNAME" to get the currently executing function, if
# any.)
ps4_parts=(
    # Same as the default: start with a plus sign that gets repeated based on
    # the current stack depth. (Bash repeats the first character of PS4.)
    '+ '

    # Make the following extra information stand out less.
    "${MAGENTA}${BOLD}"

    # Show the name of the current shell function, if any.
    '${FUNCNAME:-}'

    # Show the basename and line number of the source file or function, if
    # any. If there was a function name, put an "@" between the function name
    # and the file/function.
    '${BASH_SOURCE:+${FUNCNAME:+@}}'

    "${ORANGE}"

    # Note that LINENO is reset from 1 inside a function body. Sometimes,
    # $LINENO is a negative number. I could not find any reference to this in
    # the man page, but it seems to have to happen when returning from another
    # function. Until I understand this more completely, I wrap it in
    # parentheses to clarify that it is not a regular line number.
    '${BASH_SOURCE:+${BASH_SOURCE##*/}:${LINENO/#-*/($LINENO)}}'

    # Use a tab to separate the file/function and line number from the actual
    # line of code, rather than a space, because this helps legibility. (It
    # decreases the "jaggedness" caused by differing lengthts of file names
    # and line numbers.) I prefer this to a newline because it keeps the trace
    # more compact.
    $'\t'

    # Reset the colour and style.
    "${RESET}"
)
printf -v PS4 '%s' "${ps4_parts[@]}"
export PS4
unset ps4_parts
