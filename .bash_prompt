# Bash sexy promt

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        GREEN=$(tput setaf 190)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 256)
    else
        MAGENTA=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        GREEN=$(tput setaf 2)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

parse_git_dirty () {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
}

parse_git_branch () {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# Here we have two different PS1 strings, when I'm on local machine, I don't
# need to know what user I am or on what computer I'm hacking.
if [[ ! -n $SSH_TTY ]]; then
    export PS1="\[${BOLD}${WHITE}\] λ \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \[$PURPLE\]git:\")\$(parse_git_branch)\[$WHITE\]\n ⚡ \[$RESET\]"
else
    export PS1="\[${BOLD}${WHITE}\] λ \[${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \[$PURPLE\]git:\")\$(parse_git_branch)\[$WHITE\]\n ⚡ \[$RESET\]"
fi

export PS2="\[$ORANGE\] → \[$RESET\]"

# PS4 for debugging purposes written intially by awesome @janmoesen for `tilde`
# Include the current file and line number when tracing using "set -x". (You
# can also include "\$FUNCNAME" to get the currently executing function, if
# any.)
ps4_parts=(
    # Same as the default: start with a plus sign that gets repeated based on
    # the current stack depth. (Bash repeats the first character of PS4.)
    '+ '

    # Make the following extra information stand out less.
    "${MAGENTA}${BOLD}"

    # Show the name of the current shell function, if any.
    '${FUNCNAME}'

    # Show the basename and line number of the source file or function, if
    # any. If there was a function name, put an "@" between the function name
    # and the file/function.
    '${BASH_SOURCE:+${FUNCNAME:+@}}'

    "${ORANGE}"

    # Note that LINENO is reset from 1 inside a function body. Sometimes,
    # $LINENO is a negative number. I could not find any reference to this in
    # the man page, but it seems to have to happen when returning from another
    # function. Until I understand this more completely, I wrap it in
    # parentheses to clarify that it is not a regular line number.
    '${BASH_SOURCE:+${BASH_SOURCE##*/}:${LINENO/#-*/($LINENO)}}'

    # Use a tab to separate the file/function and line number from the actual
    # line of code, rather than a space, because this helps legibility. (It
    # decreases the "jaggedness" caused by differing lengthts of file names
    # and line numbers.) I prefer this to a newline because it keeps the trace
    # more compact.
    $'\t'

    # Reset the colour and style.
    "${RESET}"
)
printf -v PS4 '%s' "${ps4_parts[@]}"
export PS4
unset ps4_parts