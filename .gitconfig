####################################
# Global configuration file for Git.
####################################

[alias]
	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# View the SHA, description, and history graph of the latest 20 commits
	l = log --graph --pretty=format:'%C(yellow)%h%d%Creset %s %C(blue)(%cr @ %an)%Creset' --abbrev-commit --date=relative

	# View the current working tree status using the short format
	s = status --short --branch

	# Diff
	d = diff --patch-with-stat --color-moved=dimmed_zebra

	# Pull remote change
	ll = pull

	# Pull in remote changes for the current repository and all its submodules
	pl = !"git pull; git submodule foreach git pull origin master"

	# Push changes
	p = push

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = checkout -B

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" --reuse-message=HEAD; }; f"

	# Force push only if if the current value of the remote ref is the expected value
	please = push --force-with-lease

	# :)
	commend = commit --amend --no-edit

	# Publish the current branch by pushing it to the remote "origin",
	# and setting the current branch to track the upstream branch.
	publish = !"git push --set-upstream origin $(git branch-name)"

	# Delete merged branches, except common ones (master, develop).
	cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

	# "Reset Workspace".
	rw = !"git checkout master && git pull && git cleanup"

	# Recently worked on branches.
	sw = "!f() { git checkout $(git branch -v --sort=-committerdate --color=always | fzf --ansi | awk '{print $1}'); }; f"

	# Allows you to easily pick what to rebase
	rb = "!f() { git rebase -i $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ; }; f"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Global `.gitattributes`
	attributesfile = ~/.gitattributes

	# Default editor for commit messages and other inputs
	# Even when EDITOR is set to something else
	editor=vim

	# Global `.gitignore`
	excludesfile = ~/.gitignore

	# Make `git rebase` safer on OS X
	# More info: http://www.git-tower.com/blog/make-git-rebase-safe-on-osx
	trustctime = false

	# Treat
	#  - spaces before tabs,
	#  - all kinds of trailing whitespace
	# as an error.
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[diff]
	# Use more time to create better diffs.
	# E.g. matching opening/closing braces from neighbour functions.
	# See "`git help diff` --patience" and "`git help merge` recursive".
	algorithm = patience

	# Diff will detect both renames and copies.
	renames = copies

	# Default to opendiff for visualising diffs.
	# opendiff opens FileMerge
	# Override with --tool=<tool> in difftool
	# See`git help difftool`
	# If `opendiff` is not in your $PATH, override with difftool.opendiff.path
	# See`git help config` and search for "diff.tool"
	tool=opendiff

[difftool]
	# Difftool will not prompt for every file.
	# Use --prompt to override.
	prompt = false

[difftool "idea"]
	cmd = idea diff $LOCAL $REMOTE --wait

[difftool "clion"]
	cmd = clion diff $LOCAL $REMOTE --wait

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

	# opendiff opens FileMerge
	tool = opendiff

[mergetool]
	# No *.orig files left when using mergetool.
	keepBackup = false

	# Mergetool will not prompt for every file.
	# Use --prompt to override.
	prompt = false

[mergetool "idea"]
    cmd = idea merge $LOCAL $REMOTE $BASE $MERGED --wait
    trustExitCode = true

[mergetool "clion"]
    cmd = clion merge $LOCAL $REMOTE $BASE $MERGED --wait
    trustExitCode = true

[pager]
	# Use colors when paging regardless of default color setting.
	color = true
	diff = "diff-so-fancy | less --tabs=4 -RFX"
	show = "diff-so-fancy | less --tabs=4 -RFX"

[push]
	# See `git help config` and search for "push.default"
	# for more information on different options of the below setting.
	# Setting to Git 2.0 default to surpress warning message
	# If you use branches with different remote name, use "upstream"
	default = simple

[pull]
	# By default, Git does not create an extra merge commit when
	# merging a commit that is a descendant of the current commit.
	# Instead, the tip of the current branch is fast-forwarded.
	# When set to only, only such fast-forward merges are allowed.
	ff = only

	# Rebase the current branch on top of the upstream branch after fetching.
	# See https://git-scm.com/docs/git-pull#Documentation/git-pull.txt---rebasefalsetruemergespreserveinteractive
	rebase = true

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
	# Highlight current. Yellow local branches; Green remotes.
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	# Yellow meta; Magenta line info; Red for deleltions; Green for additions.
	meta = yellow
	frag = magenta
	old = red
	new = green

[color "status"]
	# Changed files are yellow.
	# Staged files are green.
	# New (untracked) files are cyan.
	# Headers are gray (white dimmed)
	# Branch is always green even in headers
	added = green
	branch = green
	changed = yellow
	header = white dim
	untracked = cyan

# URL shorthands
#
# See `git help config` and search for "url.<base>"
#
# gh: is a shorthand for git@github.com
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

# github: is a shorthand for git://github.com/
[url "git://github.com/"]
	insteadOf = "github:"

# gst: is a shorthand for git://gist.github.com/
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

# gist: is a shofthand for git://gist.github.com/
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[rebase]
	# Allow running rebase on a dirty worktree.
	# See https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autostash
	autoStash = true
[init]
	defaultBranch = main
