# Create a new directory and enter it
md() {
	mkdir -p "$@" && cd "$@"
}

# o with no arguments opens current directory, otherwise opens given location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `s` with no arguments opens the current directory in Sublime, otherwise opens
# the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .
	else
		subl "$@"
	fi
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Start an HTTP server from a directory, optionally specifying the port
server() {
	python - "${1:-8000}" <<EOF
import os
import sys
import SimpleHTTPServer
map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map
map[""] = "text/plain"
for key, value in map.items():
	map[key] = value + ";charset=UTF-8"
os.system("open http://localhost:" + sys.argv[1])
SimpleHTTPServer.test()
EOF
}

# All the dig info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Get current WiFi Password (source: https://github.com/rauchg/wifi-password/)
wifi-password() {
	local airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"
	local ssid="`$airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'`"

	if [ "$ssid" = "" ]; then
	    echo "ERROR: Could not retrieve current SSID. Are you connected?" >&2
	    exit 1
    fi

	# source: http://blog.macromates.com/2006/keychain-access-from-shell/
	local pwd="`security find-generic-password -ga \"$ssid\" 2>&1 >/dev/null`"

	# clean up password
	echo $pwd | sed -e "s/^.*\"\(.*\)\".*$/\1/"
}
